
1. Error Details :

org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.TransientPropertyValueException:
object references an unsaved transient instance - save the transient instance before flushing :
com.hb.spring.data.jpa.tutorial.entity.CourseMaterial.course -> com.hb.spring.data.jpa.tutorial.entity.Course;
nested exception is java.lang.IllegalStateException: org.hibernate.TransientPropertyValueException:
object references an unsaved transient instance - save the transient instance before flushing :
com.hb.spring.data.jpa.tutorial.entity.CourseMaterial.course -> com.hb.spring.data.jpa.tutorial.entity.Course


// Here, we are trying to save the CourseMaterial here without saving the Course

i.e. While saving the CourseMaterial here, we should have the Course already present in the database but it is not present/saved in the db.

For this, we need to save the Course in order to save the CourseMaterial here.

To make this happen, Cascading comes into picture.


Cascading means to pass the permissions/properties to your child element from your parent element.


Fix for this issue ------>>   @OneToOne(cascade = CascadeType.ALL)






2. Error Details :

org.hibernate.LazyInitializationException:
could not initialize proxy [com.hb.spring.data.jpa.tutorial.entity.Course#1] - no Session


This error is related to the FetchType defined in the entity.

Fix for this issue ------>

With fetch = FetchType.LAZY, use @ToString(exclude = "course") at the entity Class level.





3. Error Details :

org.springframework.dao.DataIntegrityViolationException: not-null property references a null or transient value :
com.hb.spring.data.jpa.tutorial.entity.CourseMaterial.course; nested exception is org.hibernate.PropertyValueException:
not-null property references a null or transient value : com.hb.spring.data.jpa.tutorial.entity.CourseMaterial.course



Fix for this issue ------>

Because 'course' is a required field now, we can't save the CourseMaterial without adding the Course to it in saveCourseMaterial() method in the CourseMaterialRepositoryTest class.






4. Error Details :

org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist:
com.hb.spring.data.jpa.tutorial.entity.Teacher; nested exception is org.hibernate.PersistentObjectException:
detached entity passed to persist: com.hb.spring.data.jpa.tutorial.entity.Teacher


Fix for this issue ------>>


https://stackoverflow.com/questions/23645091/spring-data-jpa-and-hibernate-detached-entity-passed-to-persist-on-manytomany-re




5. Error Details :


Category category = categoryRepository.findById("cid1").get();
        log.info("Category Products size : {}", category.getProducts().size());


Getting this below error while invoking size() -

org.hibernate.LazyInitializationException:
failed to lazily initialize a collection of role: com.hb.spring.data.jpa.tutorial.entity.Category.products,
could not initialize proxy - no Session



Fix for this issue ------>>

This error occurs because you are trying to access a lazily loaded collection outside the context of an open Hibernate session.


In your code snippet, it seems like you are using Spring Data JPA to access the database.
When you fetch an entity using findById method, the entity and its associated collections are loaded lazily. This means that the data is only loaded from the database when it is actually needed, not when the entity is first fetched.


In your case, you are trying to access the size of the products collection outside of the Hibernate session.
When you call category.getProducts().size(), Hibernate tries to initialize the products collection, but it fails because the Hibernate session is already closed.



To solve this problem, you can either:

a. Eagerly load the products collection along with the Category entity by using the fetch keyword in your repository method. For example:


@Query("SELECT c FROM Category c LEFT JOIN FETCH c.products WHERE c.id = :categoryId")
Category findByIdWithProducts(@Param("categoryId") String categoryId);


This will fetch the Category entity and its associated products collection in a single query, so you can access the products collection outside of the Hibernate session without any issues.




b. Open a Hibernate session before accessing the products collection. This can be done by wrapping your code with a transaction. For example:


@Transactional
public void someMethod() {
    Category category = categoryRepository.findById("cid1").get();
    log.info("Category Products size : {}", category.getProducts().size());
}



This will open a Hibernate session when the someMethod method is called,
and it will keep the session open until the method completes.
This way, you can access the products collection outside of the Hibernate session without any issues.



@Transactional is an annotation that belongs to the org.springframework.transaction.annotation package in Spring Framework.


